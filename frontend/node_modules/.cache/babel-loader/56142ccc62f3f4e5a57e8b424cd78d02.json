{"ast":null,"code":"'use client';\n\nimport { useEventListener } from \"./chunk-7JEV5YKL.mjs\"; // src/use-animation-state.ts\n\nimport { getOwnerWindow } from \"@chakra-ui/utils\";\nimport { useEffect, useState } from \"react\";\n\nfunction useAnimationState(props) {\n  const {\n    isOpen,\n    ref\n  } = props;\n  const [mounted, setMounted] = useState(isOpen);\n  const [once, setOnce] = useState(false);\n  useEffect(() => {\n    if (!once) {\n      setMounted(isOpen);\n      setOnce(true);\n    }\n  }, [isOpen, once, mounted]);\n  useEventListener(\"animationend\", () => {\n    setMounted(isOpen);\n  }, () => ref.current);\n  const hidden = isOpen ? false : !mounted;\n  return {\n    present: !hidden,\n\n    onComplete() {\n      var _a;\n\n      const win = getOwnerWindow(ref.current);\n      const evt = new win.CustomEvent(\"animationend\", {\n        bubbles: true\n      });\n      (_a = ref.current) == null ? void 0 : _a.dispatchEvent(evt);\n    }\n\n  };\n}\n\nexport { useAnimationState };","map":{"version":3,"mappings":";;;;AAAA,SAASA,cAAT,QAA+B,kBAA/B;AACA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,OAApC;;AAQO,SAASC,iBAAT,CAA2BC,KAA3B,EAA0D;EAC/D,MAAM;IAAEC,MAAF;IAAUC;EAAV,IAAkBF,KAAxB;EAEA,MAAM,CAACG,OAAD,EAAUC,UAAV,IAAwBN,SAASG,MAAT,CAA9B;EACA,MAAM,CAACI,IAAD,EAAOC,OAAP,IAAkBR,SAAS,KAAT,CAAxB;EAEAD,UAAU,MAAM;IACd,IAAI,CAACQ,IAAL,EAAW;MACTD,WAAWH,MAAX;MACAK,QAAQ,IAAR;IACF;EACF,CALA,EAKG,CAACL,MAAD,EAASI,IAAT,EAAeF,OAAf,CALH;EAOAI,iBACE,cADF,EAEE,MAAM;IACJH,WAAWH,MAAX;EACF,CAJF,EAKE,MAAMC,IAAIM,OALZ;EAQA,MAAMC,SAASR,SAAS,KAAT,GAAiB,CAACE,OAAjC;EAEA,OAAO;IACLO,SAAS,CAACD,MADL;;IAELE,aAAa;MAlCjB;;MAmCM,MAAMC,MAAMhB,eAAeM,IAAIM,OAAnB,CAAZ;MACA,MAAMK,MAAM,IAAID,IAAIE,WAAR,CAAoB,cAApB,EAAoC;QAAEC,SAAS;MAAX,CAApC,CAAZ;MACA,UAAIP,OAAJ,wBAAaQ,aAAb,CAA2BH,GAA3B;IACF;;EANK,CAAP;AAQF","names":["getOwnerWindow","useEffect","useState","useAnimationState","props","isOpen","ref","mounted","setMounted","once","setOnce","useEventListener","current","hidden","present","onComplete","win","evt","CustomEvent","bubbles","dispatchEvent"],"sources":["D:\\WebApp\\app-blog\\frontend\\node_modules\\@chakra-ui\\hooks\\src\\use-animation-state.ts"],"sourcesContent":["import { getOwnerWindow } from \"@chakra-ui/utils\"\nimport { useEffect, useState } from \"react\"\nimport { useEventListener } from \"./use-event-listener\"\n\nexport type UseAnimationStateProps = {\n  isOpen: boolean\n  ref: React.RefObject<HTMLElement>\n}\n\nexport function useAnimationState(props: UseAnimationStateProps) {\n  const { isOpen, ref } = props\n\n  const [mounted, setMounted] = useState(isOpen)\n  const [once, setOnce] = useState(false)\n\n  useEffect(() => {\n    if (!once) {\n      setMounted(isOpen)\n      setOnce(true)\n    }\n  }, [isOpen, once, mounted])\n\n  useEventListener(\n    \"animationend\",\n    () => {\n      setMounted(isOpen)\n    },\n    () => ref.current,\n  )\n\n  const hidden = isOpen ? false : !mounted\n\n  return {\n    present: !hidden,\n    onComplete() {\n      const win = getOwnerWindow(ref.current)\n      const evt = new win.CustomEvent(\"animationend\", { bubbles: true })\n      ref.current?.dispatchEvent(evt)\n    },\n  }\n}\n"]},"metadata":{},"sourceType":"module"}