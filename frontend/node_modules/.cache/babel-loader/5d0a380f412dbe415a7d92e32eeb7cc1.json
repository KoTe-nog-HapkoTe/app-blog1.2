{"ast":null,"code":"'use client';\n\nimport { useSafeLayoutEffect } from \"./chunk-724WJZW4.mjs\"; // src/use-dimensions.ts\n\nimport { getBox } from \"@chakra-ui/utils\";\nimport { useRef, useState } from \"react\";\n\nfunction useDimensions(ref, observe) {\n  const [dimensions, setDimensions] = useState(null);\n  const rafId = useRef();\n  useSafeLayoutEffect(() => {\n    function measure() {\n      const node = ref.current;\n      if (!node) return;\n      rafId.current = requestAnimationFrame(() => {\n        const boxModel = getBox(node);\n        setDimensions(boxModel);\n      });\n    }\n\n    measure();\n\n    if (observe) {\n      window.addEventListener(\"resize\", measure);\n      window.addEventListener(\"scroll\", measure);\n    }\n\n    return () => {\n      if (observe) {\n        window.removeEventListener(\"resize\", measure);\n        window.removeEventListener(\"scroll\", measure);\n      }\n\n      if (rafId.current) {\n        cancelAnimationFrame(rafId.current);\n      }\n    };\n  }, [observe]);\n  return dimensions;\n}\n\nexport { useDimensions };","map":{"version":3,"mappings":";;;;AAAA,SAASA,MAAT,QAAiC,kBAAjC;AACA,SAASC,MAAT,EAAiBC,QAAjB,QAAiC,OAAjC;;AAeO,SAASC,aAAT,CACLC,GADK,EAELC,OAFK,EAGL;EACA,MAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BL,SAA0B,IAA1B,CAApC;EACA,MAAMM,QAAQP,QAAd;EAEAQ,oBAAoB,MAAM;IACxB,SAASC,OAAT,GAAmB;MACjB,MAAMC,OAAOP,IAAIQ,OAAjB;MACA,IAAI,CAACD,IAAL,EAAW;MACXH,MAAMI,OAAN,GAAgBC,sBAAsB,MAAM;QAC1C,MAAMC,WAAWd,OAAOW,IAAP,CAAjB;QACAJ,cAAcO,QAAd;MACD,CAHe,CAAhB;IAIF;;IAEAJ;;IAEA,IAAIL,OAAJ,EAAa;MACXU,OAAOC,gBAAP,CAAwB,QAAxB,EAAkCN,OAAlC;MACAK,OAAOC,gBAAP,CAAwB,QAAxB,EAAkCN,OAAlC;IACF;;IAEA,OAAO,MAAM;MACX,IAAIL,OAAJ,EAAa;QACXU,OAAOE,mBAAP,CAA2B,QAA3B,EAAqCP,OAArC;QACAK,OAAOE,mBAAP,CAA2B,QAA3B,EAAqCP,OAArC;MACF;;MAEA,IAAIF,MAAMI,OAAV,EAAmB;QACjBM,qBAAqBV,MAAMI,OAA3B;MACF;IACF,CATA;EAUF,CA3BA,EA2BG,CAACP,OAAD,CA3BH;EA6BA,OAAOC,UAAP;AACF","names":["getBox","useRef","useState","useDimensions","ref","observe","dimensions","setDimensions","rafId","useSafeLayoutEffect","measure","node","current","requestAnimationFrame","boxModel","window","addEventListener","removeEventListener","cancelAnimationFrame"],"sources":["D:\\WebApp\\app-blog\\frontend\\node_modules\\@chakra-ui\\hooks\\src\\use-dimensions.ts"],"sourcesContent":["import { getBox, BoxModel } from \"@chakra-ui/utils\"\nimport { useRef, useState } from \"react\"\nimport { useSafeLayoutEffect } from \"./use-safe-layout-effect\"\n\n/**\n * React hook to measure a component's dimensions\n *\n * @param ref ref of the component to measure\n * @param observe if `true`, resize and scroll observers will be turned on\n *\n * @deprecated use the `useSize` hook instead\n *\n * ```jsx\n * import { useSize } from \"@chakra-ui/react-use-size\"\n * ```\n */\nexport function useDimensions(\n  ref: React.RefObject<HTMLElement>,\n  observe?: boolean,\n) {\n  const [dimensions, setDimensions] = useState<BoxModel | null>(null)\n  const rafId = useRef<number>()\n\n  useSafeLayoutEffect(() => {\n    function measure() {\n      const node = ref.current\n      if (!node) return\n      rafId.current = requestAnimationFrame(() => {\n        const boxModel = getBox(node)\n        setDimensions(boxModel)\n      })\n    }\n\n    measure()\n\n    if (observe) {\n      window.addEventListener(\"resize\", measure)\n      window.addEventListener(\"scroll\", measure)\n    }\n\n    return () => {\n      if (observe) {\n        window.removeEventListener(\"resize\", measure)\n        window.removeEventListener(\"scroll\", measure)\n      }\n\n      if (rafId.current) {\n        cancelAnimationFrame(rafId.current)\n      }\n    }\n  }, [observe])\n\n  return dimensions\n}\n"]},"metadata":{},"sourceType":"module"}