{"ast":null,"code":"import { transformProps } from '../../render/html/utils/transform.mjs';\nimport { appearAnimationStore } from './store.mjs';\nimport { appearStoreId } from './store-id.mjs';\nlet handoffFrameTime;\n\nfunction handoffOptimizedAppearAnimation(elementId, valueName,\n/**\n * Legacy arguments. This function is inlined as part of SSG so it can be there's\n * a version mismatch between the main included Motion and the inlined script.\n *\n * Remove in early 2024.\n */\n_value, _frame) {\n  const optimisedValueName = transformProps.has(valueName) ? \"transform\" : valueName;\n  const storeId = appearStoreId(elementId, optimisedValueName);\n  const optimisedAnimation = appearAnimationStore.get(storeId);\n\n  if (!optimisedAnimation) {\n    return null;\n  }\n\n  const {\n    animation,\n    startTime\n  } = optimisedAnimation;\n\n  const cancelAnimation = () => {\n    appearAnimationStore.delete(storeId);\n\n    try {\n      animation.cancel();\n    } catch (error) {}\n  };\n  /**\n   * If the startTime is null, this animation is the Paint Ready detection animation\n   * and we can cancel it immediately without handoff.\n   *\n   * Or if we've already handed off the animation then we're now interrupting it.\n   * In which case we need to cancel it.\n   */\n\n\n  if (startTime === null || window.HandoffComplete) {\n    cancelAnimation();\n    return null;\n  } else {\n    /**\n     * Otherwise we're handing off this animation to the main thread.\n     *\n     * Record the time of the first handoff. We call performance.now() once\n     * here and once in startOptimisedAnimation to ensure we're getting\n     * close to a frame-locked time. This keeps all animations in sync.\n     */\n    if (handoffFrameTime === undefined) {\n      handoffFrameTime = performance.now();\n    }\n    /**\n     * We use main thread timings vs those returned by Animation.currentTime as it\n     * can be the case, particularly in Firefox, that currentTime doesn't return\n     * an updated value for several frames, even as the animation plays smoothly via\n     * the GPU.\n     */\n\n\n    return handoffFrameTime - startTime || 0;\n  }\n}\n\nexport { handoffOptimizedAppearAnimation };","map":{"version":3,"names":["transformProps","appearAnimationStore","appearStoreId","handoffFrameTime","handoffOptimizedAppearAnimation","elementId","valueName","_value","_frame","optimisedValueName","has","storeId","optimisedAnimation","get","animation","startTime","cancelAnimation","delete","cancel","error","window","HandoffComplete","undefined","performance","now"],"sources":["D:/WebApp/app-blog/frontend/node_modules/framer-motion/dist/es/animation/optimized-appear/handoff.mjs"],"sourcesContent":["import { transformProps } from '../../render/html/utils/transform.mjs';\nimport { appearAnimationStore } from './store.mjs';\nimport { appearStoreId } from './store-id.mjs';\n\nlet handoffFrameTime;\nfunction handoffOptimizedAppearAnimation(elementId, valueName, \n/**\n * Legacy arguments. This function is inlined as part of SSG so it can be there's\n * a version mismatch between the main included Motion and the inlined script.\n *\n * Remove in early 2024.\n */\n_value, _frame) {\n    const optimisedValueName = transformProps.has(valueName)\n        ? \"transform\"\n        : valueName;\n    const storeId = appearStoreId(elementId, optimisedValueName);\n    const optimisedAnimation = appearAnimationStore.get(storeId);\n    if (!optimisedAnimation) {\n        return null;\n    }\n    const { animation, startTime } = optimisedAnimation;\n    const cancelAnimation = () => {\n        appearAnimationStore.delete(storeId);\n        try {\n            animation.cancel();\n        }\n        catch (error) { }\n    };\n    /**\n     * If the startTime is null, this animation is the Paint Ready detection animation\n     * and we can cancel it immediately without handoff.\n     *\n     * Or if we've already handed off the animation then we're now interrupting it.\n     * In which case we need to cancel it.\n     */\n    if (startTime === null || window.HandoffComplete) {\n        cancelAnimation();\n        return null;\n    }\n    else {\n        /**\n         * Otherwise we're handing off this animation to the main thread.\n         *\n         * Record the time of the first handoff. We call performance.now() once\n         * here and once in startOptimisedAnimation to ensure we're getting\n         * close to a frame-locked time. This keeps all animations in sync.\n         */\n        if (handoffFrameTime === undefined) {\n            handoffFrameTime = performance.now();\n        }\n        /**\n         * We use main thread timings vs those returned by Animation.currentTime as it\n         * can be the case, particularly in Firefox, that currentTime doesn't return\n         * an updated value for several frames, even as the animation plays smoothly via\n         * the GPU.\n         */\n        return handoffFrameTime - startTime || 0;\n    }\n}\n\nexport { handoffOptimizedAppearAnimation };\n"],"mappings":"AAAA,SAASA,cAAT,QAA+B,uCAA/B;AACA,SAASC,oBAAT,QAAqC,aAArC;AACA,SAASC,aAAT,QAA8B,gBAA9B;AAEA,IAAIC,gBAAJ;;AACA,SAASC,+BAAT,CAAyCC,SAAzC,EAAoDC,SAApD;AACA;AACA;AACA;AACA;AACA;AACA;AACAC,MAPA,EAOQC,MAPR,EAOgB;EACZ,MAAMC,kBAAkB,GAAGT,cAAc,CAACU,GAAf,CAAmBJ,SAAnB,IACrB,WADqB,GAErBA,SAFN;EAGA,MAAMK,OAAO,GAAGT,aAAa,CAACG,SAAD,EAAYI,kBAAZ,CAA7B;EACA,MAAMG,kBAAkB,GAAGX,oBAAoB,CAACY,GAArB,CAAyBF,OAAzB,CAA3B;;EACA,IAAI,CAACC,kBAAL,EAAyB;IACrB,OAAO,IAAP;EACH;;EACD,MAAM;IAAEE,SAAF;IAAaC;EAAb,IAA2BH,kBAAjC;;EACA,MAAMI,eAAe,GAAG,MAAM;IAC1Bf,oBAAoB,CAACgB,MAArB,CAA4BN,OAA5B;;IACA,IAAI;MACAG,SAAS,CAACI,MAAV;IACH,CAFD,CAGA,OAAOC,KAAP,EAAc,CAAG;EACpB,CAND;EAOA;AACJ;AACA;AACA;AACA;AACA;AACA;;;EACI,IAAIJ,SAAS,KAAK,IAAd,IAAsBK,MAAM,CAACC,eAAjC,EAAkD;IAC9CL,eAAe;IACf,OAAO,IAAP;EACH,CAHD,MAIK;IACD;AACR;AACA;AACA;AACA;AACA;AACA;IACQ,IAAIb,gBAAgB,KAAKmB,SAAzB,EAAoC;MAChCnB,gBAAgB,GAAGoB,WAAW,CAACC,GAAZ,EAAnB;IACH;IACD;AACR;AACA;AACA;AACA;AACA;;;IACQ,OAAOrB,gBAAgB,GAAGY,SAAnB,IAAgC,CAAvC;EACH;AACJ;;AAED,SAASX,+BAAT"},"metadata":{},"sourceType":"module"}