{"ast":null,"code":"'use client'; // src/use-merge-refs.ts\n\nimport { useMemo } from \"react\";\n\nfunction assignRef(ref, value) {\n  if (ref == null) return;\n\n  if (typeof ref === \"function\") {\n    ref(value);\n    return;\n  }\n\n  try {\n    ref.current = value;\n  } catch (error) {\n    throw new Error(`Cannot assign value '${value}' to ref '${ref}'`);\n  }\n}\n\nfunction useMergeRefs() {\n  for (var _len = arguments.length, refs = new Array(_len), _key = 0; _key < _len; _key++) {\n    refs[_key] = arguments[_key];\n  }\n\n  return useMemo(() => {\n    if (refs.every(ref => ref == null)) {\n      return null;\n    }\n\n    return node => {\n      refs.forEach(ref => {\n        if (ref) assignRef(ref, node);\n      });\n    };\n  }, refs);\n}\n\nexport { assignRef, useMergeRefs };","map":{"version":3,"mappings":";;AAEA,SAASA,OAAT,QAAwB,OAAxB;;AAIO,SAASC,SAAT,CAA4BC,GAA5B,EAA0DC,KAA1D,EAAoE;EACzE,IAAID,OAAO,IAAX,EAAiB;;EAEjB,IAAI,OAAOA,GAAP,KAAe,UAAnB,EAA+B;IAC7BA,IAAIC,KAAJ;IACA;EACF;;EAEA,IAAI;IAEFD,IAAIE,OAAJ,GAAcD,KAAd;EACF,CAHA,CAGA,OAASE,KAAT,EAAgB;IACd,MAAM,IAAIC,KAAJ,CAAU,wBAAwBH,KAAK,aAAaD,GAAG,GAAvD,CAAN;EACF;AACF;;AAgBO,SAASK,YAAT,GAA+D;EAAA,kCAAnCC,IAAmC;IAAnCA,IAAmC;EAAA;;EACpE,OAAOR,QAAQ,MAAM;IACnB,IAAIQ,KAAKC,KAAL,CAAYP,GAAD,IAASA,OAAO,IAA3B,CAAJ,EAAsC;MACpC,OAAO,IAAP;IACF;;IACA,OAAQQ,IAAD,IAAa;MAClBF,KAAKG,OAAL,CAAcT,GAAD,IAAS;QACpB,IAAIA,GAAJ,EAASD,UAAUC,GAAV,EAAeQ,IAAf;MACV,CAFD;IAGF,CAJA;EAKF,CATO,EASJF,IATI,CAAP;AAUF","names":["useMemo","assignRef","ref","value","current","error","Error","useMergeRefs","refs","every","node","forEach"],"sources":["D:\\WebApp\\app-blog\\frontend\\node_modules\\@chakra-ui\\hooks\\src\\use-merge-refs.ts"],"sourcesContent":["/* eslint-disable react-hooks/exhaustive-deps */\n\nimport { useMemo } from \"react\"\n\ntype ReactRef<T> = React.Ref<T> | React.MutableRefObject<T>\n\nexport function assignRef<T = any>(ref: ReactRef<T> | undefined, value: T) {\n  if (ref == null) return\n\n  if (typeof ref === \"function\") {\n    ref(value)\n    return\n  }\n\n  try {\n    // @ts-ignore\n    ref.current = value\n  } catch (error) {\n    throw new Error(`Cannot assign value '${value}' to ref '${ref}'`)\n  }\n}\n\n/**\n * React hook that merges react refs into a single memoized function\n *\n * @example\n * import React from \"react\";\n * import { useMergeRefs } from `@chakra-ui/hooks`;\n *\n * const Component = React.forwardRef((props, ref) => {\n *   const internalRef = React.useRef();\n *   return <div {...props} ref={useMergeRefs(internalRef, ref)} />;\n * });\n *\n * @see Docs https://chakra-ui.com/docs/hooks/use-merge-refs\n */\nexport function useMergeRefs<T>(...refs: (ReactRef<T> | undefined)[]) {\n  return useMemo(() => {\n    if (refs.every((ref) => ref == null)) {\n      return null\n    }\n    return (node: T) => {\n      refs.forEach((ref) => {\n        if (ref) assignRef(ref, node)\n      })\n    }\n  }, refs)\n}\n"]},"metadata":{},"sourceType":"module"}