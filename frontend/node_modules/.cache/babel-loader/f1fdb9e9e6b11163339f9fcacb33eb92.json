{"ast":null,"code":"'use client'; // src/use-event-listener-map.ts\n\nimport { getPointerEventName, wrapPointerEventHandler } from \"@chakra-ui/utils\";\nimport { useCallback, useEffect, useRef } from \"react\";\n\nfunction useEventListenerMap() {\n  const listeners = useRef( /* @__PURE__ */new Map());\n  const currentListeners = listeners.current;\n  const add = useCallback((el, type, listener, options) => {\n    const pointerEventListener = wrapPointerEventHandler(listener, type === \"pointerdown\");\n    listeners.current.set(listener, {\n      __listener: pointerEventListener,\n      type: getPointerEventName(type),\n      el,\n      options\n    });\n    el.addEventListener(type, pointerEventListener, options);\n  }, []);\n  const remove = useCallback((el, type, listener, options) => {\n    const {\n      __listener: pointerEventListener\n    } = listeners.current.get(listener);\n    el.removeEventListener(type, pointerEventListener, options);\n    listeners.current.delete(pointerEventListener);\n  }, []);\n  useEffect(() => () => {\n    currentListeners.forEach((value, key) => {\n      remove(value.el, value.type, key, value.options);\n    });\n  }, [remove, currentListeners]);\n  return {\n    add,\n    remove\n  };\n}\n\nexport { useEventListenerMap };","map":{"version":3,"mappings":";;AAAA,SAEEA,mBAFF,EAGEC,uBAHF,QAKO,kBALP;AAMA,SAASC,WAAT,EAAsBC,SAAtB,EAAiCC,MAAjC,QAA+C,OAA/C;;AA6BO,SAASC,mBAAT,GAA+C;EACpD,MAAMC,YAAYF,QAAO,mBAAIG,GAAJ,EAAP,CAAlB;EACA,MAAMC,mBAAmBF,UAAUG,OAAnC;EAEA,MAAMC,MAAMR,YAAY,CAACS,EAAD,EAAUC,IAAV,EAAqBC,QAArB,EAAoCC,OAApC,KAAqD;IAC3E,MAAMC,uBAAuBd,wBAC3BY,QAD2B,EAE3BD,SAAS,aAFkB,CAA7B;IAIAN,UAAUG,OAAV,CAAkBO,GAAlB,CAAsBH,QAAtB,EAAgC;MAC9BI,YAAYF,oBADkB;MAE9BH,MAAMZ,oBAAoBY,IAApB,CAFwB;MAG9BD,EAH8B;MAI9BG;IAJ8B,CAAhC;IAMAH,GAAGO,gBAAH,CAAoBN,IAApB,EAA0BG,oBAA1B,EAAgDD,OAAhD;EACF,CAZY,EAYT,EAZS,CAAZ;EAcA,MAAMK,SAASjB,YACb,CAACS,EAAD,EAAUC,IAAV,EAAqBC,QAArB,EAAoCC,OAApC,KAAqD;IACnD,MAAM;MAAEG,YAAYF;IAAd,IACJT,UAAUG,OAAV,CAAkBW,GAAlB,CAAsBP,QAAtB,CADF;IAEAF,GAAGU,mBAAH,CAAuBT,IAAvB,EAA6BG,oBAA7B,EAAmDD,OAAnD;IACAR,UAAUG,OAAV,CAAkBa,MAAlB,CAAyBP,oBAAzB;EACF,CANa,EAOb,EAPa,CAAf;EAUAZ,UACE,MAAM,MAAM;IACVK,iBAAiBe,OAAjB,CAAyB,CAACC,KAAD,EAAQC,GAAR,KAAgB;MACvCN,OAAOK,MAAMb,EAAb,EAAiBa,MAAMZ,IAAvB,EAA6Ba,GAA7B,EAAkCD,MAAMV,OAAxC;IACD,CAFD;EAGF,CALF,EAME,CAACK,MAAD,EAASX,gBAAT,CANF;EASA,OAAO;IAAEE,GAAF;IAAOS;EAAP,CAAP;AACF","names":["getPointerEventName","wrapPointerEventHandler","useCallback","useEffect","useRef","useEventListenerMap","listeners","Map","currentListeners","current","add","el","type","listener","options","pointerEventListener","set","__listener","addEventListener","remove","get","removeEventListener","delete","forEach","value","key"],"sources":["D:\\WebApp\\app-blog\\frontend\\node_modules\\@chakra-ui\\hooks\\src\\use-event-listener-map.ts"],"sourcesContent":["import {\n  PointerEventInfo,\n  getPointerEventName,\n  wrapPointerEventHandler,\n  EventListenerWithPointInfo,\n} from \"@chakra-ui/utils\"\nimport { useCallback, useEffect, useRef } from \"react\"\n\ninterface EventListeners {\n  add<K extends keyof DocumentEventMap>(\n    el: EventTarget,\n    type: K,\n    listener: (ev: DocumentEventMap[K], info: PointerEventInfo) => any,\n    options?: boolean | AddEventListenerOptions,\n  ): void\n  add(\n    el: EventTarget,\n    type: string,\n    listener: EventListenerWithPointInfo,\n    options?: boolean | AddEventListenerOptions,\n  ): void\n  remove<K extends keyof DocumentEventMap>(\n    el: EventTarget,\n    type: K,\n    listener: (ev: DocumentEventMap[K], info: PointerEventInfo) => any,\n    options?: boolean | EventListenerOptions,\n  ): void\n  remove(\n    el: EventTarget,\n    type: string,\n    listener: EventListenerWithPointInfo,\n    options?: boolean | EventListenerOptions,\n  ): void\n}\n\nexport function useEventListenerMap(): EventListeners {\n  const listeners = useRef(new Map())\n  const currentListeners = listeners.current\n\n  const add = useCallback((el: any, type: any, listener: any, options: any) => {\n    const pointerEventListener = wrapPointerEventHandler(\n      listener,\n      type === \"pointerdown\",\n    )\n    listeners.current.set(listener, {\n      __listener: pointerEventListener,\n      type: getPointerEventName(type),\n      el,\n      options,\n    })\n    el.addEventListener(type, pointerEventListener, options)\n  }, [])\n\n  const remove = useCallback(\n    (el: any, type: any, listener: any, options: any) => {\n      const { __listener: pointerEventListener } =\n        listeners.current.get(listener)\n      el.removeEventListener(type, pointerEventListener, options)\n      listeners.current.delete(pointerEventListener)\n    },\n    [],\n  )\n\n  useEffect(\n    () => () => {\n      currentListeners.forEach((value, key) => {\n        remove(value.el, value.type, key, value.options)\n      })\n    },\n    [remove, currentListeners],\n  )\n\n  return { add, remove }\n}\n"]},"metadata":{},"sourceType":"module"}