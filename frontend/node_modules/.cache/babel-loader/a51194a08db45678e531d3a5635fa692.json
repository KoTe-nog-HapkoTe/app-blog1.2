{"ast":null,"code":"'use client';\n\nimport { useId } from \"./chunk-6B2YUEGK.mjs\";\nimport { useControllableProp } from \"./chunk-7JSBRQFI.mjs\";\nimport { useCallbackRef } from \"./chunk-KA2477BY.mjs\"; // src/use-disclosure.ts\n\nimport { callAllHandlers } from \"@chakra-ui/utils\";\nimport { useCallback, useState } from \"react\";\n\nfunction useDisclosure() {\n  let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const {\n    onClose: onCloseProp,\n    onOpen: onOpenProp,\n    isOpen: isOpenProp,\n    id: idProp\n  } = props;\n  const onOpenPropCallbackRef = useCallbackRef(onOpenProp);\n  const onClosePropCallbackRef = useCallbackRef(onCloseProp);\n  const [isOpenState, setIsOpen] = useState(props.defaultIsOpen || false);\n  const [isControlled, isOpen] = useControllableProp(isOpenProp, isOpenState);\n  const id = useId(idProp, \"disclosure\");\n  const onClose = useCallback(() => {\n    if (!isControlled) {\n      setIsOpen(false);\n    }\n\n    onClosePropCallbackRef == null ? void 0 : onClosePropCallbackRef();\n  }, [isControlled, onClosePropCallbackRef]);\n  const onOpen = useCallback(() => {\n    if (!isControlled) {\n      setIsOpen(true);\n    }\n\n    onOpenPropCallbackRef == null ? void 0 : onOpenPropCallbackRef();\n  }, [isControlled, onOpenPropCallbackRef]);\n  const onToggle = useCallback(() => {\n    const action = isOpen ? onClose : onOpen;\n    action();\n  }, [isOpen, onOpen, onClose]);\n  return {\n    isOpen: !!isOpen,\n    onOpen,\n    onClose,\n    onToggle,\n    isControlled,\n    getButtonProps: function () {\n      let props2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return { ...props2,\n        \"aria-expanded\": isOpen,\n        \"aria-controls\": id,\n        onClick: callAllHandlers(props2.onClick, onToggle)\n      };\n    },\n    getDisclosureProps: function () {\n      let props2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return { ...props2,\n        hidden: !isOpen,\n        id\n      };\n    }\n  };\n}\n\nexport { useDisclosure };","map":{"version":3,"mappings":";;;;;;AAAA,SAASA,eAAT,QAAgC,kBAAhC;AAIA,SAASC,WAAT,EAAsBC,QAAtB,QAAsC,OAAtC;;AAUO,SAASC,aAAT,GAAuD;EAAA,IAAhCC,KAAgC,uEAAJ,EAAI;EAC5D,MAAM;IACJC,SAASC,WADL;IAEJC,QAAQC,UAFJ;IAGJC,QAAQC,UAHJ;IAIJC,IAAIC;EAJA,IAKFR,KALJ;EAOA,MAAMS,wBAAwBC,eAAeN,UAAf,CAA9B;EACA,MAAMO,yBAAyBD,eAAeR,WAAf,CAA/B;EACA,MAAM,CAACU,WAAD,EAAcC,SAAd,IAA2Bf,SAASE,MAAMc,aAAN,IAAuB,KAAhC,CAAjC;EACA,MAAM,CAACC,YAAD,EAAeV,MAAf,IAAyBW,oBAAoBV,UAApB,EAAgCM,WAAhC,CAA/B;EAEA,MAAML,KAAKU,MAAMT,MAAN,EAAc,YAAd,CAAX;EAEA,MAAMP,UAAUJ,YAAY,MAAM;IAChC,IAAI,CAACkB,YAAL,EAAmB;MACjBF,UAAU,KAAV;IACF;;IACAF;EACF,CALgB,EAKb,CAACI,YAAD,EAAeJ,sBAAf,CALa,CAAhB;EAOA,MAAMR,SAASN,YAAY,MAAM;IAC/B,IAAI,CAACkB,YAAL,EAAmB;MACjBF,UAAU,IAAV;IACF;;IACAJ;EACF,CALe,EAKZ,CAACM,YAAD,EAAeN,qBAAf,CALY,CAAf;EAOA,MAAMS,WAAWrB,YAAY,MAAM;IACjC,MAAMsB,SAASd,SAASJ,OAAT,GAAmBE,MAAlC;IACAgB;EACF,CAHiB,EAGd,CAACd,MAAD,EAASF,MAAT,EAAiBF,OAAjB,CAHc,CAAjB;EAKA,OAAO;IACLI,QAAQ,CAAC,CAACA,MADL;IAELF,MAFK;IAGLF,OAHK;IAILiB,QAJK;IAKLH,YALK;IAMLK,gBAAgB;MAAA,IAACpB,MAAD,uEAAc,EAAd;MAAA,OAAsB,EACpC,GAAGA,MADiC;QAEpC,iBAAiBK,MAFmB;QAGpC,iBAAiBE,EAHmB;QAIpCc,SAASzB,gBAAgBI,OAAMqB,OAAtB,EAA+BH,QAA/B;MAJ2B,CAAtB;IAAA,CANX;IAYLI,oBAAoB;MAAA,IAACtB,MAAD,uEAAc,EAAd;MAAA,OAAsB,EACxC,GAAGA,MADqC;QAExCuB,QAAQ,CAAClB,MAF+B;QAGxCE;MAHwC,CAAtB;IAAA;EAZf,CAAP;AAkBF","names":["callAllHandlers","useCallback","useState","useDisclosure","props","onClose","onCloseProp","onOpen","onOpenProp","isOpen","isOpenProp","id","idProp","onOpenPropCallbackRef","useCallbackRef","onClosePropCallbackRef","isOpenState","setIsOpen","defaultIsOpen","isControlled","useControllableProp","useId","onToggle","action","getButtonProps","onClick","getDisclosureProps","hidden"],"sources":["D:\\WebApp\\app-blog\\frontend\\node_modules\\@chakra-ui\\hooks\\src\\use-disclosure.ts"],"sourcesContent":["import { callAllHandlers } from \"@chakra-ui/utils\"\nimport { useControllableProp } from \"./use-controllable\"\nimport { useId } from \"./use-id\"\nimport { useCallbackRef } from \"./use-callback-ref\"\nimport { useCallback, useState } from \"react\"\n\nexport interface UseDisclosureProps {\n  isOpen?: boolean\n  defaultIsOpen?: boolean\n  onClose?(): void\n  onOpen?(): void\n  id?: string\n}\n\nexport function useDisclosure(props: UseDisclosureProps = {}) {\n  const {\n    onClose: onCloseProp,\n    onOpen: onOpenProp,\n    isOpen: isOpenProp,\n    id: idProp,\n  } = props\n\n  const onOpenPropCallbackRef = useCallbackRef(onOpenProp)\n  const onClosePropCallbackRef = useCallbackRef(onCloseProp)\n  const [isOpenState, setIsOpen] = useState(props.defaultIsOpen || false)\n  const [isControlled, isOpen] = useControllableProp(isOpenProp, isOpenState)\n\n  const id = useId(idProp, \"disclosure\")\n\n  const onClose = useCallback(() => {\n    if (!isControlled) {\n      setIsOpen(false)\n    }\n    onClosePropCallbackRef?.()\n  }, [isControlled, onClosePropCallbackRef])\n\n  const onOpen = useCallback(() => {\n    if (!isControlled) {\n      setIsOpen(true)\n    }\n    onOpenPropCallbackRef?.()\n  }, [isControlled, onOpenPropCallbackRef])\n\n  const onToggle = useCallback(() => {\n    const action = isOpen ? onClose : onOpen\n    action()\n  }, [isOpen, onOpen, onClose])\n\n  return {\n    isOpen: !!isOpen,\n    onOpen,\n    onClose,\n    onToggle,\n    isControlled,\n    getButtonProps: (props: any = {}) => ({\n      ...props,\n      \"aria-expanded\": isOpen,\n      \"aria-controls\": id,\n      onClick: callAllHandlers(props.onClick, onToggle),\n    }),\n    getDisclosureProps: (props: any = {}) => ({\n      ...props,\n      hidden: !isOpen,\n      id,\n    }),\n  }\n}\n\nexport type UseDisclosureReturn = ReturnType<typeof useDisclosure>\n"]},"metadata":{},"sourceType":"module"}