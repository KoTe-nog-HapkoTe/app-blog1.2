{"ast":null,"code":"'use client';\n\nimport { usePointerEvent } from \"./chunk-ZCYNKCF5.mjs\";\nimport { useUnmountEffect } from \"./chunk-NGVRPZ6W.mjs\"; // src/use-pan-gesture.ts\n\nimport { noop, PanSession } from \"@chakra-ui/utils\";\nimport { useEffect, useRef } from \"react\";\n\nfunction usePanGesture(ref, props) {\n  const {\n    onPan,\n    onPanStart,\n    onPanEnd,\n    onPanSessionStart,\n    onPanSessionEnd,\n    threshold\n  } = props;\n  const hasPanEvents = Boolean(onPan || onPanStart || onPanEnd || onPanSessionStart || onPanSessionEnd);\n  const panSession = useRef(null);\n  const handlers = {\n    onSessionStart: onPanSessionStart,\n    onSessionEnd: onPanSessionEnd,\n    onStart: onPanStart,\n    onMove: onPan,\n\n    onEnd(event, info) {\n      panSession.current = null;\n      onPanEnd == null ? void 0 : onPanEnd(event, info);\n    }\n\n  };\n  useEffect(() => {\n    var _a;\n\n    (_a = panSession.current) == null ? void 0 : _a.updateHandlers(handlers);\n  });\n\n  function onPointerDown(event) {\n    panSession.current = new PanSession(event, handlers, threshold);\n  }\n\n  usePointerEvent(() => ref.current, \"pointerdown\", hasPanEvents ? onPointerDown : noop);\n  useUnmountEffect(() => {\n    var _a;\n\n    (_a = panSession.current) == null ? void 0 : _a.end();\n    panSession.current = null;\n  });\n}\n\nexport { usePanGesture };","map":{"version":3,"mappings":";;;;;AAAA,SAEEA,IAFF,EAIEC,UAJF,QAMO,kBANP;AAOA,SAASC,SAAT,EAAoBC,MAApB,QAAkC,OAAlC;;AAaO,SAASC,aAAT,CACLC,GADK,EAELC,KAFK,EAGL;EACA,MAAM;IACJC,KADI;IAEJC,UAFI;IAGJC,QAHI;IAIJC,iBAJI;IAKJC,eALI;IAMJC;EANI,IAOFN,KAPJ;EASA,MAAMO,eAAeC,QACnBP,SAASC,UAAT,IAAuBC,QAAvB,IAAmCC,iBAAnC,IAAwDC,eADrC,CAArB;EAIA,MAAMI,aAAaZ,OAA0B,IAA1B,CAAnB;EAEA,MAAMa,WAAwC;IAC5CC,gBAAgBP,iBAD4B;IAE5CQ,cAAcP,eAF8B;IAG5CQ,SAASX,UAHmC;IAI5CY,QAAQb,KAJoC;;IAK5Cc,MAAMC,KAAN,EAAaC,IAAb,EAAmB;MACjBR,WAAWS,OAAX,GAAqB,IAArB;MACAf,qCAAWa,KAAX,EAAkBC,IAAlB;IACF;;EAR4C,CAA9C;EAWArB,UAAU,MAAM;IAlDlB;;IAmDI,iBAAWsB,OAAX,wBAAoBC,cAApB,CAAmCT,QAAnC;EACD,CAFD;;EAIA,SAASU,aAAT,CAAuBJ,KAAvB,EAA+C;IAC7CP,WAAWS,OAAX,GAAqB,IAAIvB,UAAJ,CAAeqB,KAAf,EAAsBN,QAAtB,EAAgCJ,SAAhC,CAArB;EACF;;EAEAe,gBACE,MAAMtB,IAAImB,OADZ,EAEE,aAFF,EAGEX,eAAea,aAAf,GAA+B1B,IAHjC;EAMA4B,iBAAiB,MAAM;IAhEzB;;IAiEI,iBAAWJ,OAAX,wBAAoBK,GAApB;IACAd,WAAWS,OAAX,GAAqB,IAArB;EACD,CAHD;AAIF","names":["noop","PanSession","useEffect","useRef","usePanGesture","ref","props","onPan","onPanStart","onPanEnd","onPanSessionStart","onPanSessionEnd","threshold","hasPanEvents","Boolean","panSession","handlers","onSessionStart","onSessionEnd","onStart","onMove","onEnd","event","info","current","updateHandlers","onPointerDown","usePointerEvent","useUnmountEffect","end"],"sources":["D:\\WebApp\\app-blog\\frontend\\node_modules\\@chakra-ui\\hooks\\src\\use-pan-gesture.ts"],"sourcesContent":["import {\n  AnyPointerEvent,\n  noop,\n  PanEventHandler,\n  PanSession,\n  PanSessionHandlers,\n} from \"@chakra-ui/utils\"\nimport { useEffect, useRef } from \"react\"\nimport { usePointerEvent } from \"./use-pointer-event\"\nimport { useUnmountEffect } from \"./use-unmount-effect\"\n\nexport interface UsePanGestureProps {\n  onPan?: PanEventHandler\n  onPanStart?: PanEventHandler\n  onPanEnd?: PanEventHandler\n  onPanSessionStart?: PanEventHandler\n  onPanSessionEnd?: PanEventHandler\n  threshold?: number\n}\n\nexport function usePanGesture(\n  ref: React.RefObject<HTMLElement>,\n  props: UsePanGestureProps,\n) {\n  const {\n    onPan,\n    onPanStart,\n    onPanEnd,\n    onPanSessionStart,\n    onPanSessionEnd,\n    threshold,\n  } = props\n\n  const hasPanEvents = Boolean(\n    onPan || onPanStart || onPanEnd || onPanSessionStart || onPanSessionEnd,\n  )\n\n  const panSession = useRef<PanSession | null>(null)\n\n  const handlers: Partial<PanSessionHandlers> = {\n    onSessionStart: onPanSessionStart,\n    onSessionEnd: onPanSessionEnd,\n    onStart: onPanStart,\n    onMove: onPan,\n    onEnd(event, info) {\n      panSession.current = null\n      onPanEnd?.(event, info)\n    },\n  }\n\n  useEffect(() => {\n    panSession.current?.updateHandlers(handlers)\n  })\n\n  function onPointerDown(event: AnyPointerEvent) {\n    panSession.current = new PanSession(event, handlers, threshold)\n  }\n\n  usePointerEvent(\n    () => ref.current,\n    \"pointerdown\",\n    hasPanEvents ? onPointerDown : noop,\n  )\n\n  useUnmountEffect(() => {\n    panSession.current?.end()\n    panSession.current = null\n  })\n}\n"]},"metadata":{},"sourceType":"module"}